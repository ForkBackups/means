import unittest
import means
from means.util.sympyhelpers import to_sympy_matrix
from means.approximation.ode_problem import ODEProblem, ODETermBase, Moment, VarianceTerm
from means.simulation import Simulation
from numpy.testing import assert_array_almost_equal
import numpy as np
import random
from sympy import Symbol, MutableDenseMatrix, symbols, Float

class ConstantDerivativesProblem(ODEProblem):
    def __init__(self):
        super(ConstantDerivativesProblem, self).__init__(method=None,
                                                         ode_lhs_terms=[ODETermBase('y_1'), ODETermBase('y_2')],
                                                         right_hand_side=['c_1', 'c_2'],
                                                         constants=['c_1', 'c_2'])

class TestSimulate(unittest.TestCase):

    def test_simulation_of_simple_model(self):
        """
        Given the simplest possible problem, the one with constant derivatives,
        results produced by the simulation should be easily predictable.
        """
        s = Simulation(ConstantDerivativesProblem())

        trajectories = s.simulate_system(parameters=[0, 1],
                                         initial_conditions=[3, 2],
                                         timepoints=[0, 1, 2, 3])
        trajectories_dict = {trajectory.description.symbol: trajectory for trajectory in trajectories}
        y_1_trajectory = trajectories_dict['y_1']
        y_2_trajectory = trajectories_dict['y_2']

        assert_array_almost_equal(y_1_trajectory.values, [3, 3, 3, 3])
        assert_array_almost_equal(y_2_trajectory.values, [2, 3, 4, 5])

    def test_postprocessing_for_lna_model(self):
        """
        Given that the problem we are modelling is LNA, check that the results are sampled from a gaussian distribution.

        TODO: Write a test for more than two species, currently that is broken in LNA.
        """

        lna_for_lotka_volterra = ODEProblem(method='LNA',
                                            ode_lhs_terms=[Moment([1, 0], symbol='Pred'),
                                                           Moment([0, 1], symbol='Prey'),
                                                           VarianceTerm('V_00', (0, 0)),
                                                           VarianceTerm('V_01', (0, 1)),
                                                           VarianceTerm('V_10', (1, 0)),
                                                           VarianceTerm('V_11', (1, 1))],
                                            right_hand_side=to_sympy_matrix(['Pred*Prey*k_2 - Pred*k_3',
                                                                             '-Pred*Prey*k_2 + Prey*k_1',
                                                                             'Pred*V_01*k_2 + Pred*V_10*k_2 + 2*V_00*(Prey*k_2 - k_3) + (Pred*k_3)**1.0 + (Pred*Prey*k_2)**1.0',
                                                                             'Pred*V_11*k_2 - Prey*V_00*k_2 + V_01*(-Pred*k_2 + k_1) + V_01*(Prey*k_2 - k_3) - (Pred*Prey*k_2)**1.0',
                                                                             'Pred*V_11*k_2 - Prey*V_00*k_2 + V_10*(-Pred*k_2 + k_1) + V_10*(Prey*k_2 - k_3) - (Pred*Prey*k_2)**1.0',
                                                                             '-Prey*V_01*k_2 - Prey*V_10*k_2 + 2*V_11*(-Pred*k_2 + k_1) + (Prey*k_1)**1.0 + (Pred*Prey*k_2)**1.0']),
                                            constants=['k_1', 'k_2', 'k_3'])

        s = Simulation(lna_for_lotka_volterra)
        np.random.seed(42)

        trajectories = s.simulate_system(range(3), [200, 10], [1, 2, 3, 4, 5])

        trajectories_dict = {trajectory.description.symbol: trajectory for trajectory in trajectories}

        assert_array_almost_equal(trajectories_dict['Pred'].values, np.array([2.00000000e+02, 2.52230012e+01,
                                                                              4.30324933e+00, -6.17462164e-01,
                                                                              1.95071783e-01]))

        assert_array_almost_equal(trajectories_dict['Prey'].values, np.array([1.00000000e+01, -1.77761036e-02,
                                                                              3.65911320e-03, -2.78905874e-03,
                                                                              -3.02892609e-03]))


class TestSimulateWithSensitivities(unittest.TestCase):


    def test_model_in_paper(self):
        """
        Given the model in the Ale et. al Paper, and the initial parameters,
        the simulation with sensitivities result should be similar to the one described in paper, within minimal margin
        of error.
        """
        parameters = [1.66e-3, 0.2]
        initial_conditions = [301, 0]
        timepoints = np.arange(0, 20, 0.1)

        problem = means.approximation.ODEProblem('MNA',
                                                 [Moment([1, 0], 'x_1'),
                                                  Moment([0, 1], 'x_2'),
                                                  Moment([0, 2], 'yx1'),
                                                  Moment([1, 1], 'yx2'),
                                                  Moment([2, 0], 'yx3')],
                                                 to_sympy_matrix(['-2*k_1*x_1*(x_1 - 1) - 2*k_1*yx3 + 2*k_2*x_2',
                                                                  'k_1*x_1*(x_1 - 1) + k_1*yx3 - k_2*x_2',

                                                                  'k_1*x_1**2 - k_1*x_1 + 2*k_1*yx2*(2*x_1 - 1) '
                                                                  '+ k_1*yx3 + k_2*x_2 - 2*k_2*yx1',

                                                                  '-2*k_1*x_1**2 + 2*k_1*x_1 + k_1*yx3*(2*x_1 - 3) '
                                                                  '- 2*k_2*x_2 + 2*k_2*yx1 - yx2*(4*k_1*x_1 '
                                                                  '- 2*k_1 + k_2)',

                                                                  '4*k_1*x_1**2 - 4*k_1*x_1 - 8*k_1*yx3*(x_1 - 1)'
                                                                  ' + 4*k_2*x_2 + 4*k_2*yx2'
                                                                  ]),
                                                 ['k_1', 'k_2']
                                                 )

        simulation = means.simulation.SimulationWithSensitivities(problem)
        trajectories = simulation.simulate_system(parameters, initial_conditions, timepoints)

        answers = {}

        # Trajectory value, sensitivity wrt k_1, sensitivity wrt k_2
        answers[Moment([1, 0], 'x_1')] = (107.948953772, -25415.3565093, 210.946558295)
        answers[Moment([0, 1], 'x_2')] = (96.5255231141, 12707.6782547, -105.473279147)

        seen_answers = set()
        for trajectory in trajectories:
            # There should be one sensitivity trajectory for each parameter
            self.assertEqual(len(trajectory.sensitivity_data), len(parameters))

            # Check the ones we have answers for
            answer = None
            try:
                answer = answers[trajectory.description]
            except KeyError:
                continue

            seen_answers.add(trajectory.description)

            self.assertAlmostEqual(answer[0], trajectory.values[-1], delta=1e-6)
            self.assertAlmostEqual(answer[1], trajectory.sensitivity_data[0].values[-1], delta=1e-6)
            self.assertAlmostEqual(answer[2], trajectory.sensitivity_data[1].values[-1], delta=1e-6)

        self.assertEqual(len(seen_answers), len(answers), msg='Some of the trajectories for moments were not returned')


class TestSimulateRegressionForPopularModels(unittest.TestCase):

    def setUp(self):
        np.random.seed(42)
        random.seed(42)

    def test_p53_3_moments(self):

        # This is just a hardcoded result of MomentExpansionApproximation(MODEL_P53,3).run()
        y_0, y_1, y_2 = symbols(['y_0', 'y_1', 'y_2'])

        yx1, yx2, yx3, yx4, yx5, yx6 = symbols(['yx1', 'yx2', 'yx3', 'yx4', 'yx5', 'yx6'])
        yx7, yx8, yx9, yx10, yx11, yx12 = symbols(['yx7', 'yx8', 'yx9', 'yx10', 'yx11', 'yx12'])
        yx13, yx14, yx15, yx16 = symbols(['yx13', 'yx14', 'yx15', 'yx16'])

        c_0, c_1, c_2, c_3, c_4, c_5, c_6 = symbols(['c_0', 'c_1', 'c_2', 'c_3', 'c_4', 'c_5', 'c_6'])

        ode_lhs_terms = [Moment(np.array([1, 0, 0]), symbol=y_0),
                         Moment(np.array([0, 1, 0]), symbol=y_1),
                         Moment(np.array([0, 0, 1]), symbol=y_2),
                         Moment(np.array([0, 0, 2]), symbol=yx1),
                         Moment(np.array([0, 0, 3]), symbol=yx2),
                         Moment(np.array([0, 1, 1]), symbol=yx3),
                         Moment(np.array([0, 1, 2]), symbol=yx4),
                         Moment(np.array([0, 2, 0]), symbol=yx5),
                         Moment(np.array([0, 2, 1]), symbol=yx6),
                         Moment(np.array([0, 3, 0]), symbol=yx7),
                         Moment(np.array([1, 0, 1]), symbol=yx8),
                         Moment(np.array([1, 0, 2]), symbol=yx9),
                         Moment(np.array([1, 1, 0]), symbol=yx10),
                         Moment(np.array([1, 1, 1]), symbol=yx11),
                         Moment(np.array([1, 2, 0]), symbol=yx12),
                         Moment(np.array([2, 0, 0]), symbol=yx13),
                         Moment(np.array([2, 0, 1]), symbol=yx14),
                         Moment(np.array([2, 1, 0]), symbol=yx15),
                         Moment(np.array([3, 0, 0]), symbol=yx16)]

        constants = [c_0, c_1, c_2, c_3, c_4, c_5, c_6]

        right_hand_side = MutableDenseMatrix([[(-c_2*c_6*y_2*yx16 - c_2*c_6*yx8*(c_6 + y_0)**2 + c_2*c_6*(c_6 + y_0)*(y_2*yx13 + yx14) - c_2*y_0*y_2*(c_6 + y_0)**3 + (c_0 - c_1*y_0)*(c_6 + y_0)**4)/(c_6 + y_0)**4], [c_3*y_0 - c_4*y_1], [c_4*y_1 - c_5*y_2], [c_4*y_1 + 2*c_4*yx3 + c_5*y_2 - 2*c_5*yx1], [c_4*y_1 + 3*c_4*yx3 + 3*c_4*yx4 - c_5*y_2 + 3*c_5*yx1 - 3*c_5*yx2], [c_3*yx8 - c_4*y_1 + c_4*yx5 - yx3*(c_4 + c_5)], [c_3*yx9 - c_4*y_1 - 2*c_4*yx3 - c_4*yx4 + c_4*yx5 + 2*c_4*yx6 + c_5*yx3 - 2*c_5*yx4], [c_3*y_0 + 2*c_3*yx10 + c_4*y_1 - 2*c_4*yx5], [2*c_3*yx11 + c_3*yx8 + c_4*y_1 + c_4*yx3 - 2*c_4*yx5 - 2*c_4*yx6 + c_4*yx7 - c_5*yx6], [c_3*y_0 + 3*c_3*yx10 + 3*c_3*yx12 - c_4*y_1 + 3*c_4*yx5 - 3*c_4*yx7], [(c_2*c_6*y_2*yx14 - c_2*y_0*yx1*(c_6 + y_0)**2 + c_4*yx10*(c_6 + y_0)**3 - (c_6 + y_0)*(c_2*c_6*yx9 + yx8*(c_2*c_6*y_2 + (c_1 + c_5)*(c_6 + y_0)**2)))/(c_6 + y_0)**3], [(c_2*c_6*y_2*yx1*yx16 - c_2*c_6*yx1*(c_6 + y_0)*(y_2*yx13 + yx14) + c_4*(c_6 + y_0)**4*(yx10 + 2*yx11) + (c_6 + y_0)**3*(-c_0*c_6*yx1 - c_0*y_0*yx1 + c_1*c_6*y_0*yx1 + c_1*y_0**2*yx1 + c_2*y_0*y_2*yx1 - c_2*y_0*yx2 - 2*c_4*c_6*y_1*yx8 - 2*c_4*y_0*y_1*yx8 + 2*c_5*c_6*y_2*yx8 + 2*c_5*y_0*y_2*yx8 - yx1*(c_2*y_0*y_2 - (c_0 - c_1*y_0)*(c_6 + y_0))) + (c_6 + y_0)**2*(yx8*(c_2*c_6*yx1 + (c_6 + y_0)**2*(2*c_4*y_1 - 2*c_5*y_2 + c_5)) - yx9*(c_2*c_6*y_2 + (c_1 + 2*c_5)*(c_6 + y_0)**2)))/(c_6 + y_0)**4], [(c_2*c_6*y_2*yx15 - c_2*y_0*yx3*(c_6 + y_0)**2 + c_3*yx13*(c_6 + y_0)**3 - (c_6 + y_0)*(c_2*c_6*yx11 + yx10*(c_2*c_6*y_2 + (c_1 + c_4)*(c_6 + y_0)**2)))/(c_6 + y_0)**3], [(c_2*c_6*y_2*yx16*yx3 + (c_6 + y_0)**4*(c_4*yx12 - yx10*(-c_4*y_1 + c_4 + c_5*y_2)) + (c_6 + y_0)**3*(-c_0*c_6*yx3 - c_0*y_0*yx3 + c_1*c_6*y_0*yx3 + c_1*y_0**2*yx3 + c_2*y_0*y_2*yx3 - c_2*y_0*yx4 - c_3*c_6*y_0*yx8 - c_3*y_0**2*yx8 - c_4*c_6*y_1*yx10 + c_4*c_6*y_1*yx8 - c_4*y_0*y_1*yx10 + c_4*y_0*y_1*yx8 + c_5*c_6*y_2*yx10 + c_5*y_0*y_2*yx10 - yx3*(-c_0*c_6 - c_0*y_0 + c_1*c_6*y_0 + c_1*y_0**2 + c_2*y_0*y_2)) + (c_6 + y_0)**2*(-yx11*(c_2*c_6*y_2 + (c_6 + y_0)**2*(c_1 + c_4 + c_5)) + yx8*(c_2*c_6*yx3 + (c_6 + y_0)**2*(c_3*y_0 - c_4*y_1))) - (c_6 + y_0)*(c_2*c_6*y_2*yx13*yx3 + yx14*(c_2*c_6*yx3 - c_3*(c_6 + y_0)**3)))/(c_6 + y_0)**4], [(c_2*c_6*y_2*yx16*yx5 + (c_6 + y_0)**4*(2*c_3*yx15 + yx10*(2*c_3*y_0 - 2*c_4*y_1 + c_4)) + (c_6 + y_0)**3*(-c_0*c_6*yx5 - c_0*y_0*yx5 + c_1*c_6*y_0*yx5 + c_1*y_0**2*yx5 + c_2*y_0*y_2*yx5 - c_2*y_0*yx6 - 2*c_3*c_6*y_0*yx10 - 2*c_3*y_0**2*yx10 + 2*c_4*c_6*y_1*yx10 + 2*c_4*y_0*y_1*yx10 - yx5*(c_2*y_0*y_2 - (c_0 - c_1*y_0)*(c_6 + y_0))) + (c_6 + y_0)**2*(c_2*c_6*yx5*yx8 - yx12*(c_2*c_6*y_2 + (c_1 + 2*c_4)*(c_6 + y_0)**2)) - (c_6 + y_0)*(c_2*c_6*yx14*yx5 + yx13*(c_2*c_6*y_2*yx5 - c_3*(c_6 + y_0)**3)))/(c_6 + y_0)**4], [(c_2*y_2*yx16*(c_6*(2*y_0 + 1) + 2*y_0**2 - 4*y_0*(c_6 + y_0) + 2*(c_6 + y_0)**2) + c_2*yx8*(c_6 + y_0)**2*(2*c_6*y_0 + c_6 - 2*y_0*(2*c_6 + y_0)) + (c_6 + y_0)**3*(c_0*c_6 + c_0*y_0 + c_1*c_6*y_0 + c_1*y_0**2 + c_2*y_0*y_2) - (c_6 + y_0)*(c_2*yx14*(c_6*(2*y_0 + 1) + 2*y_0**2 - 4*y_0*(c_6 + y_0) + 2*(c_6 + y_0)**2) + yx13*(2*c_1*(c_6 + y_0)**3 + c_2*c_6*y_2*(2*y_0 + 1) + 2*c_2*y_2*(y_0**2 - 2*y_0*(c_6 + y_0) + (c_6 + y_0)**2))))/(c_6 + y_0)**4], [(2*c_2*c_6*y_2*yx16*yx8*(c_6 + y_0)**3 + c_4*yx15*(c_6 + y_0)**3*(c_6**4 + 4*c_6**3*y_0 + 6*c_6**2*y_0**2 + 4*c_6*y_0**3 + y_0**4) - yx13*(2*c_2*c_6*y_2*yx8 + (c_6 + y_0)**3*(-c_4*y_1 + c_5*y_2))*(c_6**4 + 4*c_6**3*y_0 + 6*c_6**2*y_0**2 + 4*c_6*y_0**3 + y_0**4) - yx14*(2*c_2*y_2*(c_6 + y_0)**2 + c_2*(-2*c_6*y_0*y_2 + c_6*y_2 + 2*c_6*yx8 - 2*y_0**2*y_2) + (2*c_1 + c_5)*(c_6 + y_0)**3)*(c_6**4 + 4*c_6**3*y_0 + 6*c_6**2*y_0**2 + 4*c_6*y_0**3 + y_0**4) + (c_6 + y_0)**2*(c_6**4 + 4*c_6**3*y_0 + 6*c_6**2*y_0**2 + 4*c_6*y_0**3 + y_0**4)*(-2*c_0*c_6*yx8 - 2*c_0*y_0*yx8 + 2*c_1*c_6*y_0*yx8 + 2*c_1*y_0**2*yx8 + 2*c_2*y_0*y_2*yx8 + c_2*y_0*yx1 - c_4*c_6*y_1*yx13 - c_4*y_0*y_1*yx13 + c_5*c_6*y_2*yx13 + c_5*y_0*y_2*yx13) + (c_6 + y_0)*(c_2*yx9*(2*c_6*y_0 + c_6 - 2*y_0*(2*c_6 + y_0)) + yx8*(-2*c_2*c_6*y_0*y_2 + c_2*c_6*y_2 + 2*c_2*c_6*yx8 - 2*c_2*y_0**2*y_2 + (c_6 + y_0)**2*(2*c_0 - 2*c_1*y_0 + c_1)))*(c_6**4 + 4*c_6**3*y_0 + 6*c_6**2*y_0**2 + 4*c_6*y_0**3 + y_0**4))/((c_6 + y_0)**3*(c_6**4 + 4*c_6**3*y_0 + 6*c_6**2*y_0**2 + 4*c_6*y_0**3 + y_0**4))], [(c_1*c_6**4*yx10 - 2*c_1*c_6**4*yx15 + 4*c_1*c_6**3*y_0*yx10 - 8*c_1*c_6**3*y_0*yx15 + 6*c_1*c_6**2*y_0**2*yx10 - 12*c_1*c_6**2*y_0**2*yx15 + 4*c_1*c_6*y_0**3*yx10 - 8*c_1*c_6*y_0**3*yx15 + c_1*y_0**4*yx10 - 2*c_1*y_0**4*yx15 - 2*c_2*c_6**3*y_0*yx11 + c_2*c_6**3*y_0*yx3 + c_2*c_6**3*y_2*yx10 - 2*c_2*c_6**3*y_2*yx15 + 2*c_2*c_6**3*yx10*yx8 + c_2*c_6**3*yx11 - 6*c_2*c_6**2*y_0**2*yx11 + 3*c_2*c_6**2*y_0**2*yx3 + 2*c_2*c_6**2*y_0*y_2*yx10 - 4*c_2*c_6**2*y_0*y_2*yx15 + 4*c_2*c_6**2*y_0*yx10*yx8 + 2*c_2*c_6**2*y_0*yx11 - 2*c_2*c_6**2*y_2*yx10*yx13 - c_2*c_6**2*y_2*yx15 - 2*c_2*c_6**2*yx10*yx14 - 6*c_2*c_6*y_0**3*yx11 + 3*c_2*c_6*y_0**3*yx3 + c_2*c_6*y_0**2*y_2*yx10 - 2*c_2*c_6*y_0**2*y_2*yx15 + 2*c_2*c_6*y_0**2*yx10*yx8 + c_2*c_6*y_0**2*yx11 - 2*c_2*c_6*y_0*y_2*yx10*yx13 - c_2*c_6*y_0*y_2*yx15 - 2*c_2*c_6*y_0*yx10*yx14 + 2*c_2*c_6*y_2*yx10*yx16 - 2*c_2*y_0**4*yx11 + c_2*y_0**4*yx3 + c_3*c_6**4*yx16 + 4*c_3*c_6**3*y_0*yx16 + 6*c_3*c_6**2*y_0**2*yx16 + 4*c_3*c_6*y_0**3*yx16 + c_3*y_0**4*yx16 - c_4*c_6**4*yx15 - 4*c_4*c_6**3*y_0*yx15 - 6*c_4*c_6**2*y_0**2*yx15 - 4*c_4*c_6*y_0**3*yx15 - c_4*y_0**4*yx15)/(c_6**4 + 4*c_6**3*y_0 + 6*c_6**2*y_0**2 + 4*c_6*y_0**3 + y_0**4)], [(-c_2*yx14*(c_6 + y_0)**4*(c_6**2 + 2*c_6*y_0 + y_0**2)*(3*c_6**2*y_0 - 3*c_6**2 + 6*c_6*y_0**2 - 3*c_6*y_0 + 3*c_6*yx13 - c_6 + 3*y_0**3) + c_2*yx8*(c_6 + y_0)**4*(c_6**3 + 3*c_6**2*y_0 + 3*c_6*y_0**2 + y_0**3)*(3*c_6*y_0 + 3*c_6*yx13 - c_6 + 3*y_0**2) - yx13*(c_6 + y_0)*(c_6**2 + 2*c_6*y_0 + y_0**2)*(3*c_2*y_2*(c_6 + y_0)**2*(y_0 - 1) + c_2*y_2*(3*c_6*y_0 + 3*c_6*yx13 - c_6 + 3*y_0**2) + 3*(c_6 + y_0)**3*(-c_0 + c_1*y_0 - c_1))*(c_6**3 + 3*c_6**2*y_0 + 3*c_6*y_0**2 + y_0**3) - yx16*(c_6**2 + 2*c_6*y_0 + y_0**2)*(c_6**3 + 3*c_6**2*y_0 + 3*c_6*y_0**2 + y_0**3)*(3*c_1*(c_6 + y_0)**4 + 3*c_2*y_2*(c_6 + y_0)**3 + 3*c_2*y_2*(c_6 + y_0)**2*(-y_0 + 1) + c_2*y_2*(-3*c_6*y_0 - 3*c_6*yx13 + c_6 - 3*y_0**2)) + (c_6 + y_0)**3*(c_6**2 + 2*c_6*y_0 + y_0**2)*(c_6**3 + 3*c_6**2*y_0 + 3*c_6*y_0**2 + y_0**3)*(-3*c_0*c_6*yx13 + c_0*c_6 - 3*c_0*y_0*yx13 + c_0*y_0 + 3*c_1*c_6*y_0*yx13 - c_1*c_6*y_0 + 3*c_1*y_0**2*yx13 - c_1*y_0**2 + 3*c_2*y_0*y_2*yx13 - c_2*y_0*y_2))/((c_6 + y_0)**4*(c_6**2 + 2*c_6*y_0 + y_0**2)*(c_6**3 + 3*c_6**2*y_0 + 3*c_6*y_0**2 + y_0**3))]])

        problem = ODEProblem('MEA', ode_lhs_terms, right_hand_side, constants)

        simulation = Simulation(problem)
        timepoints = np.arange(0, 20.5, 0.5)

        parameters = [90, 0.002, 1.2, 1.1, 0.8, 0.96, 0.01]
        initial_conditions = [80, 40, 60]

        simulated_trajectories = simulation.simulate_system(parameters, initial_conditions, timepoints)
        answer_lookup = {trajectory.description: trajectory.values for trajectory in simulated_trajectories}

        # This is copy & paste from the model answer as well
        assert_array_almost_equal(answer_lookup[Moment(np.array([1, 0, 0]), symbol=y_0)],
                                  np.array([80.0, 91.2610806603, 102.686308216, 109.933251684, 110.94869635, 105.350207648, 94.0538240149, 78.9247701932, 62.3869294678, 47.001960274, 35.0615898206, 28.2435020082, 27.3706704079, 32.3183248969, 42.0889928739, 54.9985578025, 68.9536947619, 81.7868219838, 91.5901657401, 96.9959329891, 97.3627386877, 92.8421364264, 84.3236657923, 73.272168988, 61.4762424533,50.7637120227,42.7231560962,38.469283997, 38.4908216837, 42.6039654765, 50.0117466282, 59.4506901701, 69.4001577002,78.3243698773, 84.9069286181, 88.2422259139, 87.9566590434, 84.2435838803, 77.8103445963, 69.7494903693,61.3565372955]),
                                  decimal=2)
        assert_array_almost_equal(answer_lookup[Moment(np.array([0, 1, 0]), symbol=y_1)],
                                  np.array([40.0, 65.6770623435, 88.2517033254, 107.667075679, 122.502876961, 131.296471991, 133.22065575, 128.379472004, 117.838728384, 103.460946864, 87.6050572525, 72.7539295436, 61.1324254185, 54.3761228132, 53.3084553733, 57.8539387246, 67.0883391948, 79.4118924158, 92.8207267337, 105.228323011, 114.786903686, 120.158213069, 120.696036058, 116.519660015, 108.460834403, 97.9075142165, 86.5713502466, 76.2126043249, 68.3688586914, 64.1294568203, 63.9889146151, 67.7978718302, 74.8123983636, 83.8316854997, 93.3994744993, 102.036171999, 108.465098662, 111.798658105, 111.657310018, 108.206457547, 102.108817847]),
                                  decimal=2
                                  )
        assert_array_almost_equal(answer_lookup[Moment(np.array([0, 0, 1]), symbol=y_2)],
                                  np.array([60.0, 54.3421911216, 58.4333526621, 67.6229553127, 78.7343069688, 89.3188813562, 97.4939357634, 101.987525359, 102.212678494, 98.2878889685, 90.9725160657, 81.5172963056, 71.4503707325, 62.3306284628, 55.5071120261, 51.9222161344, 51.9866824269, 55.5390257081, 61.8937424341, 69.9671881798, 78.4588749996, 86.058450175, 91.6448538086, 94.4505773138, 94.1638155953, 90.9562404253, 85.4375235614, 78.5444651593, 71.3844585646, 65.0592711868, 60.4973013154, 58.319649156, 58.7585582684, 61.6384789746, 66.4196124678, 72.2951169645, 78.3248932497, 83.5843190466, 87.3043607498, 88.9822229399, 88.4469327849]),
                                  decimal=2
                                  )

        assert_array_almost_equal(answer_lookup[Moment(np.array([0, 0, 2]), symbol=yx1)],
                                  np.array([0.0, 28.5993791662, 45.7748086198, 66.8364968772, 97.0947506843, 135.324577478, 175.918470887, 212.31000862, 240.375722218, 260.107243953, 274.853957518, 288.844520386, 304.597957105, 321.741816721, 337.782452632, 350.164882734, 358.251394288, 363.97455251, 370.904035036, 382.310253159, 399.394352561, 420.697987766, 442.908583781, 462.53933381, 477.619668085, 488.305923485, 496.288307991, 503.522642122, 511.038572256, 518.536676537, 524.922116868, 529.325698636, 531.93458282, 534.1185569, 537.800325115, 544.462711439, 554.369432432, 566.432157247, 578.765442617, 589.579434648, 597.916484414]),
                                  decimal=1
                                  )

        assert_array_almost_equal(answer_lookup[Moment(np.array([0, 1, 1]), symbol=yx3)],
                                  np.array([0.0, -7.32141360954, -2.24188973022, 17.5084797878, 51.6590716616, 93.8424235009, 135.343040301, 170.125200595, 197.650834408, 222.064241424, 248.607059321, 279.68410952, 313.00822376, 342.862180452, 363.538354219, 372.774813724, 373.161139642, 370.851519565, 372.475113224, 382.015190231, 399.351371229, 421.094703512, 442.917627307, 462.011300298, 478.29846905, 493.678756873, 510.16056023, 528.132201684, 545.785549665, 560.06214574, 568.451828264, 570.517210113, 568.28443043, 565.318789843, 565.069258316, 569.403947687, 578.081337999, 589.33177882, 601.083092824, 612.064969993, 622.199907962]),
                                  decimal=1
                                  )

        assert_array_almost_equal(answer_lookup[Moment(np.array([0, 2, 0]), symbol=yx5)],
                                  np.array([0.0, 54.6787488077, 121.39466913, 208.452202663, 306.041394336, 398.631549654, 474.572074129, 531.509736428, 575.808018421, 617.14495972, 661.963602259, 709.76483484, 754.22517545, 788.111914024, 808.5780048, 819.577948708, 830.147055338, 849.814441155, 883.767675783, 930.493575276, 983.033174037, 1032.88857047, 1074.14663068, 1105.79288004, 1130.96518809, 1153.94697517, 1177.14567677, 1199.74031283, 1218.65119073, 1231.09707496, 1236.92907082, 1239.31220787, 1243.43726987, 1254.03297038, 1273.12032274, 1299.21090925, 1328.28308752, 1355.87861429, 1379.08417456, 1397.37788559, 1412.0651894]),
                                  decimal=1
                                  )
        assert_array_almost_equal(answer_lookup[Moment(np.array([1, 0, 1]), symbol=yx8)],
                                  np.array([0.0, -5.59381093653, -6.01373188616, 4.83142465175, 21.1739562401, 34.3051898654, 38.7010263034, 34.9542118715, 28.7051860602, 26.6784148891, 32.3988879223, 44.137987485, 56.1488971418, 62.265725446, 59.5304556748, 49.7465298949, 38.2170297585, 30.6823761487, 30.2597915223, 36.1015909812, 44.3693374321, 50.7517016884, 52.9062004222, 51.5803412395, 49.7348796376, 50.3804842011, 54.6420309538, 61.0901027356, 66.6539224015, 68.5142468372, 65.740746701, 59.7553546466, 53.4677067784, 49.6591327818, 49.5869839596, 52.5489591341, 56.5535678329, 59.6125884426, 60.8470250183, 60.800454067, 60.8665015286]),
                                  decimal=1
                                  )
        assert_array_almost_equal(answer_lookup[Moment(np.array([1, 1, 0]), symbol=yx10)],
                                  np.array([0.0, 22.0593723794, 75.299753943, 143.661956968, 211.305668627, 267.236954807, 309.659062883, 344.998381113, 382.251685516, 426.376615582, 474.764097865, 518.758765488, 549.121183033, 561.883088807, 560.849883932, 555.762517078, 557.376667829, 572.345843573, 600.585450753, 636.385181849, 672.254976881, 703.054272599, 728.086798434, 750.392217117, 773.65151975, 799.101577156, 824.414773703, 844.967491764, 856.71054717, 858.803882399, 854.365801154, 849.078496854, 848.542121578, 855.821742932, 870.477756188, 889.428965608, 908.966609026, 926.681878939, 942.243973437, 956.777665735, 971.416833834]),
                                  decimal=1
                                  )
        assert_array_almost_equal(answer_lookup[Moment(np.array([2, 0, 0]), symbol=yx13)],
                                  np.array([0.0, 81.5258461273, 167.954546114, 251.942490857, 324.828230888, 385.701673279, 441.363467087, 500.6915347, 567.946146057, 639.329536166, 704.771360708, 753.728199613, 781.558290863, 792.373922256, 796.613372847, 805.836927684, 827.489463493, 862.171932346, 904.702331823, 948.012305446, 987.346780966, 1022.30991727, 1055.94217358, 1091.74005065, 1130.39137271, 1168.69093753, 1201.08852899, 1222.77926963, 1232.58262231, 1233.76888086, 1232.45317329, 1234.77059327, 1244.34495423, 1261.24208422, 1282.80462044, 1305.66948076, 1327.68715245, 1348.67228282, 1369.71661676, 1391.6992575, 1414.03174622]),
                                  decimal=1
                                  )


    def test_p53_lna(self):
        # Again just an output of means.approximation.LinearNoiseApproximation(p53).run()

        c_0, c_1, c_2, c_3, c_4, c_5, c_6 = symbols(['c_0', 'c_1', 'c_2', 'c_3', 'c_4', 'c_5', 'c_6'])
        constants = [c_0, c_1, c_2, c_3, c_4, c_5, c_6]

        y_0, y_1, y_2 = symbols(['y_0', 'y_1', 'y_2'])

        V_00 = Symbol('V_00')
        V_02 = Symbol('V_02')
        V_20 = Symbol('V_20')
        V_01 = Symbol('V_01')
        V_21 = Symbol('V_21')
        V_22 = Symbol('V_22')
        V_10 = Symbol('V_10')
        V_12 = Symbol('V_12')
        V_11 = Symbol('V_11')

        ode_lhs_terms = [Moment(np.array([1, 0, 0]), symbol=y_0),
                         Moment(np.array([0, 1, 0]), symbol=y_1),
                         Moment(np.array([0, 0, 1]), symbol=y_2),
                         VarianceTerm(V_00, (0, 0)),
                         VarianceTerm(V_01, (0, 1)),
                         VarianceTerm(V_02, (0, 2)),
                         VarianceTerm(V_10, (1, 0)),
                         VarianceTerm(V_11, (1, 1)),
                         VarianceTerm(V_12, (1, 2)),
                         VarianceTerm(V_20, (2, 0)),
                         VarianceTerm(V_21, (2, 1)),
                         VarianceTerm(V_22, (2, 2))]

        right_hand_side = MutableDenseMatrix([[c_0 - c_1*y_0 - c_2*y_0*y_2/(c_6 + y_0)], [c_3*y_0 - c_4*y_1], [c_4*y_1 - c_5*y_2], [2*V_00*(-c_1 + c_2*y_0*y_2/(c_6 + y_0)**2 - c_2*y_2/(c_6 + y_0)) - V_02*c_2*y_0/(c_6 + y_0) - V_20*c_2*y_0/(c_6 + y_0) + c_0**Float('1.0', prec=15) + (c_1*y_0)**Float('1.0', prec=15) + (c_2*y_0*y_2/(c_6 + y_0))**Float('1.0', prec=15)], [V_00*c_3 - V_01*c_4 + V_01*(-c_1 + c_2*y_0*y_2/(c_6 + y_0)**2 - c_2*y_2/(c_6 + y_0)) - V_21*c_2*y_0/(c_6 + y_0)], [V_01*c_4 - V_02*c_5 + V_02*(-c_1 + c_2*y_0*y_2/(c_6 + y_0)**2 - c_2*y_2/(c_6 + y_0)) - V_22*c_2*y_0/(c_6 + y_0)], [V_00*c_3 - V_10*c_4 + V_10*(-c_1 + c_2*y_0*y_2/(c_6 + y_0)**2 - c_2*y_2/(c_6 + y_0)) - V_12*c_2*y_0/(c_6 + y_0)], [V_01*c_3 + V_10*c_3 - 2*V_11*c_4 + (c_3*y_0)**Float('1.0', prec=15) + (c_4*y_1)**Float('1.0', prec=15)], [V_02*c_3 + V_11*c_4 - V_12*c_4 - V_12*c_5 - (c_4*y_1)**Float('1.0', prec=15)], [V_10*c_4 - V_20*c_5 + V_20*(-c_1 + c_2*y_0*y_2/(c_6 + y_0)**2 - c_2*y_2/(c_6 + y_0)) - V_22*c_2*y_0/(c_6 + y_0)], [V_11*c_4 + V_20*c_3 - V_21*c_4 - V_21*c_5 - (c_4*y_1)**Float('1.0', prec=15)], [V_12*c_4 + V_21*c_4 - 2*V_22*c_5 + (c_4*y_1)**Float('1.0', prec=15) + (c_5*y_2)**Float('1.0', prec=15)]])

        problem = ODEProblem('LNA', ode_lhs_terms, right_hand_side, constants)

        simulation = Simulation(problem)

        timepoints = np.arange(0, 20.5, 0.5)
        parameters = [90, 0.002, 1.2, 1.1, 0.8, 0.96, 0.01]
        initial_conditions = [80, 40, 60]

        results = simulation.simulate_system(parameters, initial_conditions, timepoints)

        results_dict = {t.description: t.values for t in results}

        assert_array_almost_equal(results_dict[Moment(np.array([1, 0, 0]), symbol=y_0)],
                                  np.array([80.0, 79.1914740741, 79.9965992329, 104.757648005, 120.578727088, 123.625206959, 123.96128436, 82.7992770474, 72.969246402, 44.4156687873, 30.9092456985, 46.423683946, 42.7809706641, 19.0878802128, 48.4536080199, 78.7752508454, 81.3518991999, 100.209004988, 52.1574381872, 101.490225853, 113.379695621, 116.740675457, 73.013623733, 87.5875770675, 41.1328281111, 24.1179749096, 67.118762094, 6.68894373981, 71.1628138437, 39.5630424494, 33.0596472337, 75.4319249595, 56.197544248, 106.450025998, 107.741535966, 47.3359499928, 80.6510210778, 84.2708255921, 79.7045784887, 91.705844575, 48.370911984]),
                                  decimal=3)

        assert_array_almost_equal(results_dict[Moment(np.array([0, 1, 0]), symbol=y_1)],
                                  np.array([40.0, 57.1167556561, 79.256989629, 97.6003424371, 105.027101911, 134.253703289, 140.963298647, 133.665335589, 130.634411817, 90.0576485135, 116.852067224, 105.108267082, 40.6294248475, 54.8936675225, 53.9876853104, 73.0288716935, 43.5029866606, 83.7102704857, 73.3673978019, 116.887163066, 126.779184193, 163.028298877, 132.447880522, 139.652927357, 124.794217403, 73.266618371, 64.3904319568, 79.0744095042, 89.4239610675, 48.5329448553, 69.9268603664, 74.53962416, 67.7668059066, 77.3129863689, 96.4245270836, 108.063656586, 99.1486239561, 113.359776108, 121.379864182, 160.1543129, 65.4335585637]),
                                  decimal=3)

        assert_array_almost_equal(results_dict[Moment(np.array([0, 0, 1]), symbol=y_2)],
                                  np.array([60.0, 55.801520363, 59.2514861196, 66.6939807382, 74.0266560861, 87.75867501, 94.5489860211, 103.558303549, 105.923250253, 91.0106034811, 112.018502603, 96.6016038707, 49.2842205322, 68.8714831808, 53.0202508497, 52.4354537685, 28.1507133056, 50.2727519602, 65.4537783909, 76.2773556745, 79.939578983, 105.825863104, 104.967414284, 104.739539035, 115.61868957, 84.9556066665, 56.4488920599, 96.5401807491, 71.8215126846, 53.9779463325, 73.9363247459, 55.6559579202, 59.7507791639, 42.5220093781, 57.5850452991, 96.7292445787, 74.7145007402, 84.7610649373, 93.8314564752, 118.357794655, 66.2615966428]),
                                  decimal=3)

    def test_MM_3_moments(self):

        c_0, c_1, c_2 = symbols(['c_0', 'c_1', 'c_2'])
        constants = [c_0, c_1, c_2]

        y_0, y_1 = symbols(['y_0', 'y_1'])

        yx1 = Symbol('yx1')
        yx2 = Symbol('yx2')
        yx3 = Symbol('yx3')
        yx4 = Symbol('yx4')
        yx5 = Symbol('yx5')
        yx6 = Symbol('yx6')
        yx7 = Symbol('yx7')

        right_hand_side = MutableDenseMatrix([[-c_0*y_0*(y_0 + y_1 - 181) - c_0*yx3 - c_0*yx5 - c_1*(y_0 + y_1 - 301)], [c_2*(-y_0 - y_1 + 301)], [c_2*(-y_0 - y_1 - 2*yx1 - 2*yx3 + 301)], [c_2*(-y_0 - y_1 - 3*yx1 - 3*yx2 - 3*yx3 - 3*yx4 + 301)], [-c_0*yx4 - c_0*yx6 - c_2*yx5 - yx1*(c_0*y_0 + c_1) - yx3*(2*c_0*y_0 + c_0*y_1 - 181*c_0 + c_1 + c_2)], [-c_0*y_0*yx2 - 2*c_0*y_0*yx4 - c_0*y_1*yx4 + c_0*yx1*yx3 + c_0*yx1*yx5 + 181*c_0*yx4 - c_1*yx2 - c_1*yx4 - c_2*yx3 - 2*c_2*yx4 - c_2*yx5 - 2*c_2*yx6], [c_0*y_0**2 + c_0*y_0*y_1 - 181*c_0*y_0 - 2*c_0*yx6 - 2*c_0*yx7 - c_1*y_0 - c_1*y_1 + 301*c_1 - yx3*(2*c_0*y_0 - c_0 + 2*c_1) - yx5*(4*c_0*y_0 + 2*c_0*y_1 - 363*c_0 + 2*c_1)], [c_0*y_0*yx1 + 2*c_0*y_0*yx3 - 2*c_0*y_0*yx4 - 4*c_0*y_0*yx6 + c_0*y_1*yx3 - 2*c_0*y_1*yx6 + 2*c_0*yx3**2 + 2*c_0*yx3*yx5 - 181*c_0*yx3 + c_0*yx4 + 363*c_0*yx6 - c_1*yx1 - c_1*yx3 - 2*c_1*yx4 - 2*c_1*yx6 - c_2*yx6 - c_2*yx7], [-c_0*y_0**2 - c_0*y_0*y_1 + 3*c_0*y_0*yx3 + 6*c_0*y_0*yx5 - 3*c_0*y_0*yx6 - 6*c_0*y_0*yx7 + 181*c_0*y_0 + 3*c_0*y_1*yx5 - 3*c_0*y_1*yx7 + 3*c_0*yx3*yx5 - c_0*yx3 + 3*c_0*yx5**2 - 544*c_0*yx5 + 3*c_0*yx6 + 546*c_0*yx7 - c_1*y_0 - c_1*y_1 - 3*c_1*yx3 - 3*c_1*yx5 - 3*c_1*yx6 - 3*c_1*yx7 + 301*c_1]])

        ode_lhs_terms = [Moment(np.array([1, 0]), symbol=y_0),
                         Moment(np.array([0, 1]), symbol=y_1),
                         Moment(np.array([0, 2]), symbol=yx1),
                         Moment(np.array([0, 3]), symbol=yx2),
                         Moment(np.array([1, 1]), symbol=yx3),
                         Moment(np.array([1, 2]), symbol=yx4),
                         Moment(np.array([2, 0]), symbol=yx5),
                         Moment(np.array([2, 1]), symbol=yx6),
                         Moment(np.array([3, 0]), symbol=yx7)]

        problem = ODEProblem('MEA', ode_lhs_terms, right_hand_side, constants)

        parameters = [0.00166, 0.001, 0.1]
        initial_conditions = [301, 0, 0, 0, 0]
        timepoints = np.arange(0, 51, 1)

        sim = Simulation(problem)
        results = sim.simulate_system(parameters, initial_conditions, timepoints)
        results_dict = {t.description: t.values for t in results}

        answers = np.array([
            [301.0, 256.492639782, 229.852002298, 211.465246643, 197.360680462, 185.656067167, 175.380946164,
             166.006967909, 157.236063077, 148.896347433, 140.88846739, 133.153986764, 125.659439703, 118.386845837,
             111.3278231, 104.479371328, 97.8417753998, 91.4179868074, 85.2122859482, 79.2299290872, 73.4762649572,
             67.9561629325, 62.6740800899, 57.6343280823, 52.8406445593, 48.2960456304, 44.0024086727, 39.9603504911,
             36.16930043, 32.6274667775, 29.3318107918, 26.2780023115, 23.4603636677, 20.8719439867, 18.5045767987,
             16.3490470065, 14.395249091, 12.6323324801, 11.0487992245, 9.63274648875, 8.37203895862, 7.25450475517,
             6.26807979261, 5.40095720097, 4.64172176857, 3.97948861823, 3.40398871014, 2.90558194914, 2.47536220203,
             2.1051798516, 1.78755423264],
            [0.0, 2.36149153969, 7.7515135209, 14.7191363234, 22.5457124691, 30.843296667, 39.3904369603, 48.0553556601,
             56.7567883911, 65.4428704627, 74.0793950352, 82.642554975, 91.115014262, 99.4835099842, 107.737368719,
             115.867400091, 123.865264401, 131.723319094, 139.434356781, 146.991380154, 154.3876025, 161.61631605,
             168.670979419, 175.545274097, 182.233112456, 188.72866768, 195.026441874, 201.121335459, 207.008736955,
             212.684566262, 218.145373121, 223.388395517, 228.41161221, 233.213793267, 237.794535739, 242.154315467,
             246.294483432, 250.217259442, 253.925718666, 257.42376128, 260.716059186, 263.807993051, 266.705591313,
             269.415454603, 271.944650037, 274.300633231, 276.49114698, 278.52417699, 280.407807446, 282.150164582,
             283.759340314],
            [0.0, 2.31983366694, 7.35677890779, 13.4369006791, 19.7921073564, 26.0713369383, 32.1172763867,
             37.8624270442, 43.2798014597, 48.3595432404, 53.0981064354, 57.4931041976, 61.5416214957, 65.2396982683,
             68.5823780045, 71.5640488513, 74.1790402195, 76.4219370815, 78.2880507847, 79.7739392558, 80.877692597,
             81.5994678948, 81.9418622248, 81.9101165813, 81.5123887702, 80.759850581, 79.6669760185, 78.2515027695,
             76.53436158, 74.5395377731, 72.2938329853, 69.8264289538, 67.1684025552, 64.3521945724, 61.4111404207,
             58.3785704494, 55.2872553061, 52.1687096759, 49.05287029, 45.9672363218, 42.9365686348, 39.9826065782,
             37.1239500822, 34.375882259, 31.7503773586, 29.2562703437, 26.8995172184, 24.6833366057, 22.6086606926,
             20.6744095638, 18.8778164063],
            [0.0, -1.60651977695, -4.35451333791, -7.53161577455, -11.0191210379, -14.7162559649, -18.5146472936,
             -22.3127366438, -26.0237579598, -29.5773455771, -32.9180927464, -36.003062146, -38.7991769491,
             -41.2812403259, -43.430500085, -45.2333955826, -46.6807058177, -47.76736494, -48.492163277, -48.8578908996,
             -48.8710674558, -48.5419414176, -47.8846672589, -46.9174248043, -45.6622315935, -44.144796867,
             -42.3941272524, -40.4420316821, -38.3225372206, -36.0714116071, -33.7252518691, -31.3205528372,
             -28.8928157273, -26.4757553941, -24.1006521763, -21.7952959881, -19.5836603501, -17.4854768187,
             -15.5161653293, -13.6865606347, -12.0032532766, -10.4689667117, -9.08303920281, -7.84166718144,
             -6.73831476688, -5.76491066546, -4.9123028337, -4.17038178537, -3.52880822979, -2.97706428888,
             -2.50492364666],
            [0.0, 25.0309972905, 26.9056189306, 25.9215014325, 25.4621542384, 25.9865944764, 27.3412285302,
             29.2665516824, 31.5222409808, 33.9145569056, 36.2960668935, 38.5579191108, 40.6207809933, 42.427986939,
             43.9403899104, 45.1317260122, 45.9852160625, 46.4926493502, 46.6529136317, 46.4712781729, 45.9584959302,
             45.1299930946, 44.0059191931, 42.6110459185, 40.9739861549, 39.126917131, 37.1045881709, 34.9436988956,
             32.6818886916, 30.3570004948, 28.0057794184, 25.6628515305, 23.3600838559, 21.1259505297, 18.9849799989,
             16.9569820825, 15.0569175729, 13.2950369601, 11.6771433347, 10.2050435322, 8.87723371848, 7.68932214367,
             6.63447815273, 5.70399484066, 4.88806056883, 4.17686862218, 3.56031798898, 3.02810628792, 2.57009693759,
             2.17743431287, 1.8420500892],
        ])

        assert_array_almost_equal(results_dict[Moment(np.array([1, 0]), symbol=y_0)], answers[0], decimal=2)
        assert_array_almost_equal(results_dict[Moment(np.array([0, 1]), symbol=y_1)], answers[1], decimal=2)
        assert_array_almost_equal(results_dict[Moment(np.array([0, 2]), symbol=yx1)], answers[2], decimal=2)
        assert_array_almost_equal(results_dict[Moment(np.array([1, 1]), symbol=yx3)], answers[3], decimal=2)
        assert_array_almost_equal(results_dict[Moment(np.array([2, 0]), symbol=yx5)], answers[4], decimal=2)

    def test_mm_lna(self):

        c_0 = Symbol('c_0')
        c_1 = Symbol('c_1')
        c_2 = Symbol('c_2')

        constants = [c_0, c_1, c_2]

        y_0 = Symbol('y_0')
        y_1 = Symbol('y_1')

        V_00 = Symbol('V_00')
        V_01 = Symbol('V_01')
        V_10 = Symbol('V_10')
        V_11 = Symbol('V_11')

        right_hand_side = MutableDenseMatrix([[-c_0*y_0*(y_0 + y_1 - 181) + c_1*(-y_0 - y_1 + 301)], [c_2*(-y_0 - y_1 + 301)], [2*V_00*(-c_0*y_0 - c_0*(y_0 + y_1 - 181) - c_1) + V_01*(-c_0*y_0 - c_1) + V_10*(-c_0*y_0 - c_1) + (c_1*(-y_0 - y_1 + 301))**Float('1.0', prec=15) + (c_0*y_0*(y_0 + y_1 - 181))**Float('1.0', prec=15)], [-V_00*c_2 - V_01*c_2 + V_01*(-c_0*y_0 - c_0*(y_0 + y_1 - 181) - c_1) + V_11*(-c_0*y_0 - c_1)], [-V_00*c_2 - V_10*c_2 + V_10*(-c_0*y_0 - c_0*(y_0 + y_1 - 181) - c_1) + V_11*(-c_0*y_0 - c_1)], [-V_01*c_2 - V_10*c_2 - 2*V_11*c_2 + (c_2*(-y_0 - y_1 + 301))**Float('1.0', prec=15)]])

        ode_lhs_terms = [Moment(np.array([1, 0]), symbol=y_0),
                         Moment(np.array([0, 1]), symbol=y_1),
                         VarianceTerm(V_00, (0, 0)),
                         VarianceTerm(V_01, (0, 1)),
                         VarianceTerm(V_10, (1, 0)),
                         VarianceTerm(V_11, (1, 1))]

        problem = ODEProblem('LNA', ode_lhs_terms, right_hand_side, constants)

        simulation = Simulation(problem)

        parameters = [0.00166, 0.001, 0.1]
        initial_conditions = [301, 0, 0, 0, 0]
        timepoints = np.arange(0, 51, 1)

        results = simulation.simulate_system(parameters, initial_conditions, timepoints)
        results_dict = {t.description: t.values for t in results}

        answers = np.array([
            [301.0, 253.436204566, 230.979937842, 204.788375704, 200.702081292, 186.700214895, 169.55274518,
             172.886849671, 163.162739153, 150.065251265, 132.384230734, 129.127889951, 129.173570586, 126.290300197,
             114.252052972, 113.204700825, 95.1139404228, 82.9887100358, 78.5678469333, 88.0933796784, 69.4089961867,
             67.8450703519, 69.5724696162, 63.337046349, 45.8974177336, 45.3968374186, 49.383867011, 37.1971368196,
             39.4769627647, 33.7410154804, 30.9601505347, 27.7139599986, 23.8036526083, 23.7608053923, 15.5146758224,
             19.0321624258, 18.325963395, 21.7767482547, 10.087362842, 4.92575948392, 9.54896456015, 3.38745834523,
             6.5947923919, 4.60581264612, 6.21689947528, 5.446392893, 3.59236888858, 1.08215157214, 2.5709100709,
             1.77705725707, 2.14497286178],
            [0.0, 4.84523313622, 6.90986981639, 20.5395973602, 22.2942326462, 27.6240531838, 36.424640945,
             36.8724566907, 51.0373385448, 56.512898557, 83.8518607355, 80.2356913682, 87.1665972214, 91.1911941353,
             102.279960896, 114.602305255, 121.581893031, 136.232923213, 137.287055837, 135.766847829, 161.16278263,
             159.971722631, 154.173184687, 173.410043038, 182.001202567, 190.862317333, 190.136780804, 211.62501592,
             199.268263416, 217.007030375, 213.843188415, 212.567792688, 236.800759441, 233.908547984, 239.845245558,
             246.579060084, 247.620136326, 232.210821473, 254.301189011, 256.556380674, 259.553405022, 272.829631718,
             261.554313692, 274.956855149, 269.213033823, 275.211114272, 272.784404667, 276.210719763, 281.90835264,
             282.157591867, 277.571924101]]
        )

        assert_array_almost_equal(results_dict[Moment(np.array([1, 0]), symbol=y_0)], answers[0], decimal=3)
        assert_array_almost_equal(results_dict[Moment(np.array([0, 1]), symbol=y_1)], answers[1], decimal=3)

