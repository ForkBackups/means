#!/usr/bin/env python
import os
import sys
import means

from means.approximation.lna.lna import LinearNoiseApproximation
from means.simulation.simulate import simulate
from means.core import Model
from means.approximation.mea.moment_expansion_approximation import MomentExpansionApproximation
from means.core import ODEProblem
from means.simulation.simulate import graphbuilder
from means.inference.inference import parse_experimental_data_file, Inference, InferenceWithRestarts

def printOptions():
    print "\nList of possible options:"

    print "\n Moment expansion approximation:"
    print "  --MEA\t\tCreate a system of ODEs using moment expansion from the model\n\t\tspecified with --model."
    print "  --model\tSpecify the model input file. Use format in modeltemplate.txt.\n\t\tE.g. --model=yourmodel.txt."
    print "  --nMom\tNumber of moments used in expansion. Default --nMom=2."
    print "  --ODEout\tName of output file. Default --ODEout=ODEout."

    print "\n Linear noise approximation:"
    print "  --LNA\t\tCreate a system of ODEs using LNA. Use --model and --ODEout\n\t\toptions as above."

    print "\n Simulation:"
    print "  --sim\t\tSimulate moment trajectories for a given set of parameters.\n\t\tUse --timeparam and --ODEout to specify required\n\t\tinformation."
    print "  --simout\tSpecify filename for simulated trajectory data output."
    print "  --maxorder\tSpecify the maximum order of moments to simulate (only for\n\t\t--MEA).  Default = maxorder of MEA model used"



    print "\n Parameter inference:"
    print "  --infer\tInfer model parameters using experimental data.\n\t\tUse --timeparam and --data to provide required information."
    print "  --data\tSpecify experimental data file to be used for parameter\n\t\tinference. Timepoints must be the same in both --data and\n\t\t--timeparam files."
    print "  --inferfile\tName of parameter inference output file.\n\t\tDefault --inferfile=inference.txt."
    print "  --restart\tUse Latin Hypercube Sampling for random restarts. Use\n\t\t--timeparam to specify ranges for both kinetic parameters and\n\t\tinitial conditions. For fixed starting parameter values, enter\n\t\tsame value for upper and lower bound."
    print "  --nRestart\tSpecify the number of random restarts. Default --nRestart=4."
    print "  --limit\tConstrain parameter values during optimisation. Use --timeparam\n\t\tto set constraints."
    print "  --pdf\t\tChoose the probability density function used to approximate\n\t\tlikelihood for each species/timepoint.\n\t\tOptions: gamma, normal, lognormal."
    print "  --maxent\tUse maximum entropy to approximate probability density."

    print "\n Graph options:"
    print "  --plot\tPlot simulated or inferred moment trajectories."

    print "\n  --help\tPrints out this list of options.\n"

def run():
    
    MFK = False
    model_file = False
    nMoments = 2
    ODEout = 'ODEout'
    tpfile = None
    solve = False
    maxorder = None
    plot = False
    plottitle = ''
    trajout = 'traj.txt'
    infer = False
    inferfile = 'inference.txt'
    exptdata = None
    restart = False
    nRestart=4
    limit = False
    distribution = False
    LNA = False

    if len(sys.argv) < 2:
        print "Please provide options.\n\n"
        printOptions()
        sys.exit(1)


    for i in range(1,len(sys.argv)):
        if sys.argv[i].startswith('--'):
            option = sys.argv[i][2:]

            if option == 'help':
                printOptions()
                sys.exit()
            elif option == 'MEA': MFK = True
            elif option[0:6] == 'model=':model_file = option[6:]
            elif option[0:5] == 'nMom=':nMoments = option[5:]
            elif option[0:7] == 'ODEout=':ODEout = option[7:]
            elif option[0:10]=='timeparam=':tpfile=option[10:]
            elif option == 'sim' : solve = True
            elif option == 'plot' : plot = True
            elif option[0:7] == 'simout=' : trajout = option[7:]
            elif option[0:9] == 'maxorder=' : maxorder = int(option[9:])
            elif option == 'infer' : infer = True
            elif option[0:10] == 'inferfile=': inferfile = option[10:]
            elif option[0:5] == 'data=' : exptdata=option[5:]
            elif option == 'restart':restart=True
            elif option[0:9] == 'nRestart=':nRestart=option[9:]
            elif option[0:5] == 'limit':limit=True
            elif option[0:4] == 'pdf=': distribution = option[4:]
            elif option[0:6] == 'maxent': distribution = 'maxent'
            elif option[0:3] == 'LNA' : LNA = True
            elif option.startswith('random-seed='):
                import random
                random_seed = int(option[12:])
                print 'Setting random seed to {0}'.format(random_seed)
                random.seed(random_seed)
                import numpy.random
                numpy.random.seed(random_seed)
            elif not(sys.argv[i-1][2:] == 'LNA'):
                print "\nunknown option "+sys.argv[i]
                printOptions()
                sys.exit()
        elif not(sys.argv[i-1][2:]=='LNA'):
            print "\nunknown option "+sys.argv[i]
            printOptions()
            sys.exit()

    if MFK and LNA:
        print "\n  Error:\n  Please choose EITHER --MEA or --LNA.\n"
        sys.exit(1)

    if MFK or LNA:
        if not model_file:
            print "\n No input model file given.\n Try:\n\t--model=modelname.txt\n"
            sys.exit(1)

        model = None
        try:
            model = Model.from_file(model_file)
        except IOError as e:
            print "\n  Error:\n  Cannot open {0!r}. Got {1!r}\n" \
                  "Please try again with correct model filename.\n".format(model_file, e)
            sys.exit(1)

        approximation = None
        if MFK:
            approximation = MomentExpansionApproximation(model, nMoments)
        else:
            approximation = LinearNoiseApproximation(model)

        problem = approximation.run()

        problem.to_file(ODEout)
        problem.output_latex('.'.join([ODEout, 'tex']))

    if solve and infer:
        print "\n  Error:\n  Please choose EITHER --solve or --infer but not both.\n"
        sys.exit()

    if solve:
        if not os.path.exists(tpfile):
            print "\n  Error:\n  "+tpfile+"  does not exist in working directory.\n  Please try again with correct timepoint/parameter filename.\n"
            sys.exit(1)

        problem = ODEProblem.from_file(ODEout)

        try:
            parameters = means.io.from_file(tpfile)
        except Exception:
            print 'There was a problem reading parameters file {0!r}. ' \
                  'Ensure it is in correct format'.format(tpfile)
            sys.exit(1)

        # Take lower bound as starting values
        param = [x[0] for x in parameters['parameter_range']]
        initcond = [x[0] for x in parameters['initial_conditions_range']]

        t = parameters['timepoints']

        solution, momlist = simulate(problem, trajout, t, param, initcond, maxorder)

        if plot:
            graphbuilder(solution, ODEout, plottitle, t, momlist)

    if infer:
        if not tpfile:
            print "\n No timepoints/parameters/initial conditions given for inference.\n " \
                  "Please provide a file in the format of paramtimetemp.txt."
            sys.exit(1)
        if not os.path.exists(tpfile):
            print "\n  Error:\n  "+tpfile+"  does not exist in working directory.\n  " \
                                          "Please try again with correct " \
                                          "timepoint/parameter/initial conditions filename.\n"
            sys.exit(1)
        if exptdata is None:
            print "\n No experimental data provided for inference.\n " \
                  "Please try again specifying your data file with the --data option."
            sys.exit(1)
        if not os.path.exists(exptdata):
            print "\n  Error:\n  "+exptdata+"  does not exist in working directory.\n  " \
                                            "Please try again with correct experimental data filename.\n"
            sys.exit(1)

        problem = ODEProblem.from_file(ODEout)
        # read sample data from file and get indices for mean/variances in CVODE output
        (observed_timepoints, observed_trajectories) = parse_experimental_data_file(exptdata)

        try:
            parameters = means.io.from_file(tpfile)
        except Exception:
            print 'There was a problem reading parameters file {0!r}. ' \
                  'Ensure it is in correct format'.format(tpfile)
            sys.exit(1)

        variable_parameters = parameters['variable_parameters']
        param = parameters['parameter_range']
        initcond = parameters['initial_conditions_range']
        t = parameters['timepoints']

        optimiser_method = distribution if distribution else 'sum_of_squares'

        if restart:
            inference = InferenceWithRestarts(problem, int(nRestart),
                                              param, initcond, variable_parameters,
                                              observed_trajectories,
                                              method=optimiser_method)
        else:
            inference = Inference(problem,
                                  # Just take the lower bound as starting parameter, if we're
                                  # not doing restarts
                                  [x[0] for x in param],
                                  [x[0] for x in initcond],
                                  variable_parameters,
                                  observed_trajectories,
                                  method=optimiser_method)

        result = inference.infer()
        result.to_file(inferfile)
        if plot:
            from matplotlib import pyplot as plt
            result.plot()
            plt.show()
run()
